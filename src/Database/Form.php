<?php

namespace App\Database;

use App\Authentication\CurrentUser;
use App\Database\Exceptions\TransactionFailedException;
use App\Web\Middleware\AuthorizationMiddleware;
use DateTime;
use Iterator;
use JetBrains\PhpStorm\ArrayShape;
use Jinya\Database\Attributes\Column;
use Jinya\Database\Attributes\Id;
use Jinya\Database\Attributes\Table;
use Jinya\Database\Entity;
use Jinya\Database\Exception\NotNullViolationException;
use Jinya\Router\Extensions\Database\Attributes\ApiIgnore;
use Jinya\Router\Extensions\Database\Attributes\Create;
use Jinya\Router\Extensions\Database\Attributes\Delete;
use Jinya\Router\Extensions\Database\Attributes\Find;
use Jinya\Router\Extensions\Database\Attributes\Update;
use JsonException;
use PDOException;

/**
 * This class contains a form, forms allow artists to receive feedback from their site visitors
 */
#[Table('form')]
#[Find('/api/form', new AuthorizationMiddleware(ROLE_READER))]
#[Create('/api/form', new AuthorizationMiddleware(ROLE_WRITER))]
#[Update('/api/form', new AuthorizationMiddleware(ROLE_WRITER))]
#[Delete('/api/form', new AuthorizationMiddleware(ROLE_WRITER))]
class Form extends Entity
{
    #[Id]
    #[Column(autogenerated: true)]
    public int $id;

    /** @var int The ID of the artist who created the form */
    #[Column(sqlName: 'creator_id')]
    #[ApiIgnore]
    public int $creatorId;

    /** @var int The ID of the artist who last touched the form */
    #[Column(sqlName: 'updated_by_id')]
    #[ApiIgnore]
    public int $updatedById;

    /** @var DateTime The time the form was created at */
    #[Column(sqlName: 'created_at')]
    #[ApiIgnore]
    public DateTime $createdAt;

    /** @var DateTime The time the form was last updated at */
    #[Column(sqlName: 'last_updated_at')]
    #[ApiIgnore]
    public DateTime $lastUpdatedAt;

    /** @var string The title of the form */
    #[Column]
    public string $title;

    /** @var string The description of the form may contain HTML */
    #[Column]
    public string $description = '';

    /** @var string The email address filled out forms should be mailed to */
    #[Column(sqlName: 'to_address')]
    public string $toAddress;

    /**
     * Gets all form items in the form
     *
     * @return Iterator<FormItem>
     */
    public function getItems(): Iterator
    {
        return FormItem::findByForm($this->id);
    }

    /**
     * Creates the current form
     *
     * @return void
     * @throws NotNullViolationException
     */
    public function create(): void
    {
        $this->lastUpdatedAt = new DateTime();
        $this->updatedById = CurrentUser::$currentUser->id;

        $this->createdAt = new DateTime();
        $this->creatorId = CurrentUser::$currentUser->id;

        parent::create();
    }

    /**
     * Updates the current form
     *
     * @return void
     * @throws NotNullViolationException
     */
    public function update(): void
    {
        $this->lastUpdatedAt = new DateTime();
        $this->updatedById = CurrentUser::$currentUser->id;

        parent::update();
    }

    /**
     * Formats the form into an array
     *
     * @return array<string, array<string, array<string, string|null>|string>|int|string>
     */
    #[ArrayShape([
        'id' => 'int',
        'description' => 'string',
        'title' => 'string',
        'toAddress' => 'string',
        'created' => 'array',
        'updated' => 'array'
    ])] public function format(): array
    {
        $creator = $this->getCreator();
        $updatedBy = $this->getUpdatedBy();

        return [
            'id' => $this->id,
            'description' => $this->description,
            'title' => $this->title,
            'toAddress' => $this->toAddress,
            'created' => [
                'by' => [
                    'artistName' => $creator?->artistName,
                    'email' => $creator?->email,
                    'profilePicture' => $creator?->profilePicture,
                ],
                'at' => $this->createdAt->format(DATE_ATOM),
            ],
            'updated' => [
                'by' => [
                    'artistName' => $updatedBy?->artistName,
                    'email' => $updatedBy?->email,
                    'profilePicture' => $updatedBy?->profilePicture,
                ],
                'at' => $this->lastUpdatedAt->format(DATE_ATOM),
            ],
        ];
    }

    /**
     * Gets the creator of this form
     *
     * @return Artist|null
     */
    public function getCreator(): ?Artist
    {
        return Artist::findById($this->creatorId);
    }

    /**
     * Gets the artist that last updated this form
     *
     * @return Artist|null
     */
    public function getUpdatedBy(): ?Artist
    {
        return Artist::findById($this->updatedById);
    }

    /**
     * Replaces all form items with the new items
     *
     * @param array{type: string, options?: string[], spamFilter?: string[], label: string, helpText?: string, placeholder?: string, isFromAddress?: bool, isSubject?: bool, isRequired?: bool}[] $newItems
     * @throws TransactionFailedException
     * @throws JsonException
     */
    public function replaceItems(array $newItems): void
    {
        $pdo = self::getPdo();
        $begin = $pdo->beginTransaction();
        if (!$begin) {
            throw new TransactionFailedException('Transaction could not be initialized');
        }

        $newItemQueries = [];

        foreach ($newItems as $idx => $newItem) {
            $newItemQueries[] = self::getQueryBuilder()
                ->newInsert()
                ->into(FormItem::getTableName())
                ->addRow([
                    'position' => $idx,
                    'type' => $newItem['type'],
                    'options' => json_encode($newItem['options'] ?? [], JSON_THROW_ON_ERROR),
                    'spam_filter' => json_encode($newItem['spamFilter'] ?? [], JSON_THROW_ON_ERROR),
                    'label' => $newItem['label'],
                    'help_text' => $newItem['helpText'] ?? '',
                    'form_id' => $this->id,
                    'is_from_address' => ($newItem['isFromAddress'] ?? false) === true ? 1 : 0,
                    'is_subject' => ($newItem['isSubject'] ?? false) === true ? 1 : 0,
                    'is_required' => ($newItem['isRequired'] ?? false) === true ? 1 : 0,
                    'placeholder' => $newItem['placeholder'] ?? '',
                ]);
        }

        try {
            $query = self::getQueryBuilder()
                ->newDelete()
                ->from(MenuItem::getTableName())
                ->where('form_id = :formId', ['formId' => $this->id]);

            self::executeQuery($query);
            foreach ($newItemQueries as $newItem) {
                self::executeQuery($newItem);
            }

            $pdo->commit();
        } catch (PDOException $ex) {
            $pdo->rollBack();
            throw $ex;
        }
    }
}
