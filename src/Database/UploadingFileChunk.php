<?php

namespace App\Database;

use Exception;
use Iterator;
use Jinya\Database\Attributes\Column;
use Jinya\Database\Attributes\Id;
use Jinya\Database\Attributes\Table;
use Jinya\Database\Creatable;
use Jinya\Database\CreatableEntityTrait;
use Jinya\Database\Deletable;
use Jinya\Database\DeletableEntityTrait;
use Jinya\Database\EntityTrait;

/**
 * This class contains a chunk of an uploading file
 */
#[Table('uploading_file_chunk')]
class UploadingFileChunk implements Creatable, Deletable
{
    use EntityTrait;
    use CreatableEntityTrait;
    use DeletableEntityTrait;

    #[Id]
    #[Column(autogenerated: true)]
    public int $id;

    /** @var string The ID of the owning uploading file */
    #[Column(sqlName: 'uploading_file_id')]
    public string $uploadingFileId;

    /** @var string The absolut path to the chunk */
    #[Column(sqlName: 'chunk_path')]
    public string $chunkPath;

    /** @var int The position of the chunk, the chunk position is used to connect the resulting chunks in the correct order */
    #[Column(sqlName: 'chunk_position')]
    public int $chunkPosition;

    /**
     * Gets all chunks for the given file ordered by position
     *
     * @param int $fileId
     * @return Iterator
     * @throws Exception
     */
    public static function findByFile(int $fileId): Iterator
    {
        $query = self::getQueryBuilder()
            ->newSelect()
            ->from(self::getTableName() . ' AS ufc')
            ->cols([
                'ufc.id AS id',
                'ufc.chunk_position AS chunk_position',
                'ufc.chunk_path AS chunk_path'
            ])
            ->innerJoin(
                UploadingFile::getTableName() . ' AS uf',
                'ufc.uploading_file_id = uf.id AND uf.file_id = :fileId',
                ['fileId' => $fileId]
            )
            ->orderBy(['ufc.chunk_position']);

        /** @var array<string, mixed>[] $data */
        $data = self::executeQuery($query);
        foreach ($data as $item) {
            yield self::fromArray($item);
        }
    }
}
