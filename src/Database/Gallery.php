<?php

namespace App\Database;

use App\Authentication\CurrentUser;
use App\Web\Middleware\AuthorizationMiddleware;
use DateTime;
use Iterator;
use JetBrains\PhpStorm\ArrayShape;
use Jinya\Database\Attributes\Column;
use Jinya\Database\Attributes\Id;
use Jinya\Database\Attributes\Table;
use Jinya\Database\Entity;
use Jinya\Database\Exception\NotNullViolationException;
use Jinya\Router\Extensions\Database\Attributes\Create;
use Jinya\Router\Extensions\Database\Attributes\Delete;
use Jinya\Router\Extensions\Database\Attributes\Find;
use Jinya\Router\Extensions\Database\Attributes\Update;

/**
 * This class contains a gallery, galleries are used to arrange files in a list or masonry layout and horizontal or vertical orientation. They can be embedded into segment pages and blog posts
 */
#[Table('gallery')]
#[Find('/api/gallery', new AuthorizationMiddleware(ROLE_READER))]
#[Create('/api/gallery', new AuthorizationMiddleware(ROLE_WRITER))]
#[Update('/api/gallery', new AuthorizationMiddleware(ROLE_WRITER))]
#[Delete('/api/gallery', new AuthorizationMiddleware(ROLE_WRITER))]
class Gallery extends Entity
{
    /** @var string Used to mark a gallery for list or sequential layout */
    public const TYPE_SEQUENCE = 'sequence';
    /** @var string Used to mark a gallery for masonry layout */
    public const TYPE_MASONRY = 'masonry';

    /** @var string Used to mark a gallery for horizontal orientation */
    public const ORIENTATION_HORIZONTAL = 'horizontal';
    /** @var string Used to mark a gallery for vertical orientation */
    public const ORIENTATION_VERTICAL = 'vertical';

    #[Id]
    #[Column(autogenerated: true)]
    public int $id;

    /** @var int The ID of the artist that created the gallery */
    #[Column('creator_id')]
    public int $creatorId;

    /** @var int The ID of the artist that last touched the gallery */
    #[Column(sqlName: 'updated_by_id')]
    public int $updatedById;

    /** @var DateTime The time the gallery was created */
    #[Column('created_at')]
    public DateTime $createdAt;

    /** @var DateTime The time the gallery was last updated */
    #[Column('last_updated_at')]
    public DateTime $lastUpdatedAt;

    /** @var string The name of the gallery */
    #[Column]
    public string $name;

    /** @var string The description of the gallery. Currently ignored by the default theme. May contain HTML */
    #[Column]
    public string $description = '';

    /** @var string The type or layout of the gallery. The selected layout should be respected in themes */
    #[Column]
    public string $type = self::TYPE_SEQUENCE;

    /** @var string The orientation of the gallery. The selected orientation should be respected in themes */
    #[Column]
    public string $orientation = self::ORIENTATION_HORIZONTAL;

    /**
     * Formats the gallery into an array
     *
     * @return array<string, array<string, array<string, string|null>|string>|int|string>
     */
    #[ArrayShape([
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'type' => 'string',
        'orientation' => 'string',
        'created' => 'array',
        'updated' => 'array'
    ])] public function format(): array
    {
        $creator = $this->getCreator();
        $updatedBy = $this->getUpdatedBy();

        return [
            'id' => $this->id,
            'name' => $this->name,
            'description' => $this->description,
            'type' => $this->type,
            'orientation' => $this->orientation,
            'created' => [
                'by' => [
                    'artistName' => $creator?->artistName,
                    'email' => $creator?->email,
                    'profilePicture' => $creator?->profilePicture,
                ],
                'at' => $this->createdAt->format(DATE_ATOM),
            ],
            'updated' => [
                'by' => [
                    'artistName' => $updatedBy?->artistName,
                    'email' => $updatedBy?->email,
                    'profilePicture' => $updatedBy?->profilePicture,
                ],
                'at' => $this->lastUpdatedAt->format(DATE_ATOM),
            ],
        ];
    }

    /**
     * Gets the creator of this gallery
     *
     * @return Artist|null
     */
    public function getCreator(): ?Artist
    {
        return Artist::findById($this->creatorId);
    }

    /**
     * Gets the artist that last updated this gallery
     *
     * @return Artist|null
     */
    public function getUpdatedBy(): ?Artist
    {
        return Artist::findById($this->updatedById);
    }

    /**
     * Creates the current artist
     *
     * @return void
     * @throws NotNullViolationException
     */
    public function create(): void
    {
        $this->lastUpdatedAt = new DateTime();
        $this->updatedById = CurrentUser::$currentUser->id;

        $this->createdAt = new DateTime();
        $this->creatorId = CurrentUser::$currentUser->id;

        parent::create();
    }

    /**
     * Updates the current gallery
     *
     * @return void
     * @throws NotNullViolationException
     */
    public function update(): void
    {
        $this->lastUpdatedAt = new DateTime();
        $this->updatedById = CurrentUser::$currentUser->id;

        parent::update();
    }

    /**
     * Get all files in the gallery
     *
     * @return Iterator<GalleryFilePosition>
     */
    public function getFiles(): Iterator
    {
        $query = self::getQueryBuilder()
            ->newSelect()
            ->from(GalleryFilePosition::getTableName())
            ->cols([
                'position',
                'id',
                'file_id',
                'gallery_id'
            ])
            ->where('gallery_id = :parentId', ['parentId' => $this->id])
            ->orderBy(['position']);

        /** @var array<string, mixed>[] $data */
        $data = self::executeQuery($query);
        foreach ($data as $item) {
            yield GalleryFilePosition::fromArray($item);
        }
    }
}
