<?php

namespace App\Database;

use Iterator;
use JetBrains\PhpStorm\ArrayShape;
use Jinya\Database\Attributes\Column;
use Jinya\Database\Attributes\Id;
use Jinya\Database\Attributes\Table;
use Jinya\Database\Creatable;
use Jinya\Database\CreatableEntityTrait;
use Jinya\Database\Deletable;
use Jinya\Database\DeletableEntityTrait;
use Jinya\Database\EntityTrait;
use Random\RandomException;

/**
 * This class contains a known device, known devices are used to remove the need for a two-factor code. It is up to the API consumer whether they want to use them or not.
 */
#[Table('known_device')]
class KnownDevice implements Creatable, Deletable
{
    use DeletableEntityTrait;
    use CreatableEntityTrait;
    use EntityTrait;

    #[Id]
    #[Column(autogenerated: true)]
    public int $id;

    /** @var int The ID of the artist this known device belongs to */
    #[Column(sqlName: 'user_id')]
    public int $userId;

    /** @var string The key of the known device */
    #[Column(sqlName: 'device_key')]
    public string $deviceKey;

    /** @var string The user agent of the browser or API client this known device was issued for */
    #[Column(sqlName: 'user_agent')]
    public string $userAgent = '';

    /** @var string The remote address of the API consumer this known device was issued for */
    #[Column(sqlName: 'remote_address')]
    public string $remoteAddress = '';

    /**
     * @throws RandomException
     */
    public function __construct()
    {
        $this->deviceKey = bin2hex(random_bytes(20));
    }

    /**
     * Gets all known devices for the given artist
     *
     * @param int $artistId
     * @return Iterator<KnownDevice>
     */
    public static function findByArtist(int $artistId): Iterator
    {
        $query = self::getQueryBuilder()
            ->newSelect()
            ->from(self::getTableName())
            ->cols([
                'id',
                'user_id',
                'device_key',
                'user_agent',
                'remote_address'
            ])
            ->where('user_id = :artistId', ['artistId' => $artistId]);

        /** @var array<string, mixed>[] $data */
        $data = self::executeQuery($query);

        foreach ($data as $item) {
            yield self::fromArray($item);
        }
    }

    /**
     * Gets a known device by code
     *
     * @param string $knownDeviceCode
     * @return KnownDevice|null
     */
    public static function findByCode(string $knownDeviceCode): ?KnownDevice
    {
        $query = self::getQueryBuilder()
            ->newSelect()
            ->from(self::getTableName())
            ->cols([
                'id',
                'user_id',
                'device_key',
                'user_agent',
                'remote_address'
            ])
            ->where('device_key = :knownDeviceCode', ['knownDeviceCode' => $knownDeviceCode]);

        /** @var array<string, mixed>[] $data */
        $data = self::executeQuery($query);
        if (empty($data)) {
            return null;
        }

        return self::fromArray($data[0]);
    }

    /**
     * Formats the known device into an array
     *
     * @return array<string, string>
     */
    #[ArrayShape([
        'remoteAddress' => 'string',
        'userAgent' => 'string',
        'key' => 'string',
    ])]
    public function format(): array
    {
        return [
            'remoteAddress' => $this->remoteAddress,
            'userAgent' => $this->userAgent,
            'key' => $this->deviceKey,
        ];
    }
}
