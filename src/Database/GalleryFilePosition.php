<?php

namespace Jinya\Cms\Database;

use JetBrains\PhpStorm\ArrayShape;
use Jinya\Database\Attributes\Column;
use Jinya\Database\Attributes\Id;
use Jinya\Database\Attributes\Table;
use Jinya\Database\Creatable;
use Jinya\Database\CreatableEntityTrait;
use Jinya\Database\Deletable;
use Jinya\Database\DeletableEntityTrait;
use Jinya\Database\EntityTrait;
use Jinya\Database\Exception\NotNullViolationException;
use Jinya\Database\Updatable;
use Jinya\Database\UpdatableEntityTrait;

/**
 * This class is a mapper class to combine galleries and files, while maintaining a position the file is placed at in the gallery
 */
#[Table('gallery_file_position')]
class GalleryFilePosition implements Creatable, Updatable, Deletable
{
    use EntityTrait;
    use UpdatableEntityTrait;
    use CreatableEntityTrait {
        CreatableEntityTrait::create as internalCreate;
    }
    use DeletableEntityTrait {
        DeletableEntityTrait::delete as internalDelete;
    }

    #[Id]
    #[Column(autogenerated: true)]
    public int $id;

    #[Column]
    public int $position;

    /** @var int The ID of the gallery */
    #[Column(sqlName: 'gallery_id')]
    public int $galleryId;

    /** @var int The ID of the file */
    #[Column(sqlName: 'file_id')]
    public int $fileId;

    /**
     * Gets the gallery file position at the given position in the given gallery
     *
     * @param int $id The gallery ID
     * @param int $position The files' position
     * @return GalleryFilePosition | null
     */
    public static function findByPosition(int $id, int $position): ?GalleryFilePosition
    {
        $query = self::getQueryBuilder()
            ->newSelect()
            ->from(self::getTableName())
            ->cols([
                'position',
                'id',
                'file_id',
                'gallery_id'
            ])
            ->where('gallery_id = :parentId AND position = :position', ['parentId' => $id, 'position' => $position])
            ->orderBy(['position']);

        /** @var array<string, mixed>[] $data */
        $data = self::executeQuery($query);
        if (empty($data)) {
            return null;
        }

        return self::fromArray($data[0]);
    }

    /**
     * Creates the current gallery file position, also moves the position of the other gallery file positions according to the new position
     *
     * @return void
     * @throws NotNullViolationException
     */
    public function create(): void
    {
        $this->internalRearrange($this->galleryId, $this->position);
        $this->internalCreate();
        $this->resetOrder($this->galleryId);
    }

    /**
     * Rearranges the items in the same parent
     *
     * @param int $parentId
     * @param int $newPosition
     */
    protected function internalRearrange(int $parentId, int $newPosition): void
    {
        $query = self::getQueryBuilder()
            ->newSelect()
            ->from(self::getTableName())
            ->cols([
                'position',
                'id'
            ])
            ->where(
                'position >= :newPosition AND gallery_id = :parentId',
                ['newPosition' => $newPosition, 'parentId' => $parentId]
            )
            ->orderBy(['position']);

        /** @var array<string, mixed>[] $data */
        $data = self::executeQuery($query);
        $previousPosition = $newPosition;
        foreach ($data as $item) {
            ++$previousPosition;
            $query = self::getQueryBuilder()
                ->newUpdate()
                ->table(self::getTableName())
                ->set('position', (string)$previousPosition)
                ->where('id = :id', ['id' => $item['id']]);
            self::executeQuery($query);
        }

        $this->position = $newPosition;
    }

    /**
     * Resets the order of all entities in the given parent. Reset means, in this context, that it starts the position from 0 and counts up
     *
     * @param int $parentId The parent id
     */
    protected function resetOrder(int $parentId): void
    {
        $query = self::getQueryBuilder()
            ->newSelect()
            ->from(self::getTableName())
            ->cols([
                'position',
                'id'
            ])
            ->where('gallery_id = :parentId', ['parentId' => $parentId])
            ->orderBy(['position']);

        /** @var array<string, array<string, mixed>> $data */
        $data = self::executeQuery($query);
        foreach ($data as $idx => $item) {
            $query = self::getQueryBuilder()
                ->newUpdate()
                ->table(self::getTableName())
                ->set('position', $idx)
                ->where('id = :id', ['id' => $item['id']]);
            self::executeQuery($query);
        }
    }

    /**
     * Deletes the current gallery file position, also resets the position of the other gallery file positions according to the new position
     *
     * @return void
     */
    public function delete(): void
    {
        $this->internalDelete();
        $this->internalRearrange($this->galleryId, -1);
        $this->resetOrder($this->galleryId);
    }

    /**
     * Formats the gallery file position into an array
     *
     * @return array<string, array<string, int|string|null>|int>
     */
    #[ArrayShape([
        'gallery' => 'array',
        'file' => 'array',
        'id' => 'int',
        'position' => 'int'
    ])] public function format(): array
    {
        $gallery = $this->getGallery();
        $file = $this->getFile();

        return [
            'gallery' => [
                'id' => $this->galleryId,
                'name' => $gallery?->name,
                'description' => $gallery?->description,
            ],
            'file' => [
                'path' => $file?->path,
                'id' => $file?->id,
                'name' => $file?->name,
                'type' => $file?->type,
            ],
            'id' => $this->id,
            'position' => $this->position,
        ];
    }

    /**
     * Gets the associated gallery
     *
     * @return Gallery|null
     */
    public function getGallery(): ?Gallery
    {
        return Gallery::findById($this->galleryId);
    }

    /**
     * Gets the associated file
     *
     * @return File|null
     */
    public function getFile(): ?File
    {
        return File::findById($this->fileId);
    }

    /**
     * Moves the current gallery file position to the new position. All other gallery file positions are rearranged accordingly
     *
     * @param int $newPosition
     * @return void
     * @throws NotNullViolationException
     */
    public function move(int $newPosition): void
    {
        $this->internalRearrange($this->galleryId, $newPosition);
        $this->update();
        $this->resetOrder($this->galleryId);
    }
}
