<?php

namespace App\Database;

use App\Database\Converter\BooleanConverter;
use App\Database\Converter\JsonConverter;
use Iterator;
use JetBrains\PhpStorm\Pure;
use Jinya\Database\Attributes\Column;
use Jinya\Database\Attributes\Id;
use Jinya\Database\Attributes\Table;
use Jinya\Database\CreatableEntityTrait;
use Jinya\Database\EntityTrait;

/**
 * This class contains a form item, a form has several items
 */
#[Table('form_item')]
class FormItem
{
    use EntityTrait;

    #[Id]
    #[Column(autogenerated: true)]
    public int $id;

    /** @var int The position of the current entity */
    #[Column]
    public int $position;

    /** @var string The type of the form item, currently supported are select, checkbox and textarea. You can also specify any valid HTML5 form type */
    #[Column]
    public string $type = 'text';

    /** @var array<string> The options of the form item, only needed when the type is select */
    #[Column]
    #[JsonConverter]
    public array $options = [];

    /** @var array<string> The spam filter contains a list of keywords, by which a submitted form is declared as spam. Messages marked as spam will not be sent to the recipient address of the form */
    #[Column(sqlName: 'spam_filter')]
    #[JsonConverter]
    public array $spamFilter = [];

    /** @var string The label of the form item */
    #[Column]
    public string $label;

    /** @var string The help text of the form item, it is theme-dependent if and if yes, how they will be displayed */
    #[Column(sqlName: 'help_text')]
    public string $helpText = '';

    /** @var int The ID of the form this form item belongs to */
    #[Column(sqlName: 'form_id')]
    public int $formId;

    /** @var bool If true, this form items value is considered the from address in the submitted message and the artist will reply to this */
    #[Column(sqlName: 'is_from_address', defaultValue: false)]
    #[BooleanConverter]
    public bool $isFromAddress = false;

    /** @var bool If true, this form items value will be used for the subject of the mail */
    #[Column(sqlName: 'is_subject', defaultValue: false)]
    #[BooleanConverter]
    public bool $isSubject = false;

    /** @var bool If true, this form item is required and needs to be filled out */
    #[Column(sqlName: 'is_required', defaultValue: false)]
    #[BooleanConverter]
    public bool $isRequired = false;

    /** @var string|null The placeholder text for the form element rendered, may be null */
    #[Column]
    public ?string $placeholder = '';

    /**
     * Gets the form items in the given form
     *
     * @param int $id
     * @return Iterator<FormItem>
     */
    public static function findByForm(int $id): Iterator
    {
        $query = self::getQueryBuilder()
            ->newSelect()
            ->from(self::getTableName())
            ->cols([
                'id',
                'form_id',
                'type',
                'options',
                'spam_filter',
                'label',
                'help_text',
                'position',
                'is_from_address',
                'is_subject',
                'is_required',
                'placeholder'
            ])
            ->where('form_id = :id', ['id' => $id]);

        $data = self::executeQuery($query);

        foreach ($data as $item) {
            yield self::fromArray($item);
        }
    }

    /**
     * Gets the form of the current form item
     *
     * @return Form|null
     */
    public function getForm(): ?Form
    {
        return Form::findById($this->formId);
    }

    /**
     * Formats the form item into an array
     *
     * @return array<string, array<string>|bool|int|string|null>
     */
    #[Pure]
    public function format(): array
    {
        return [
            'type' => $this->type,
            'options' => $this->options,
            'spamFilter' => $this->spamFilter,
            'label' => $this->label,
            'placeholder' => $this->placeholder,
            'helpText' => $this->helpText,
            'position' => $this->position,
            'id' => $this->id,
            'isRequired' => $this->isRequired,
            'isFromAddress' => $this->isFromAddress,
            'isSubject' => $this->isSubject,
        ];
    }
}
