<?php

namespace Jinya\Cms\Database;

use Jinya\Cms\Database\Exceptions\TransactionFailedException;
use Jinya\Cms\Web\Middleware\AuthorizationMiddleware;
use Iterator;
use Jinya\Database\Attributes\Column;
use Jinya\Database\Attributes\Id;
use Jinya\Database\Attributes\Table;
use Jinya\Database\Entity;
use Jinya\Router\Extensions\Database\Attributes\Create;
use Jinya\Router\Extensions\Database\Attributes\Delete;
use Jinya\Router\Extensions\Database\Attributes\Find;
use Jinya\Router\Extensions\Database\Attributes\Update;
use JsonSerializable;
use PDOException;

/**
 * This class contains a menu, menus contain menu items, which are used to create the navigation in themes
 */
#[Table('menu')]
#[Find('/api/menu', new AuthorizationMiddleware(ROLE_READER))]
#[Create('/api/menu', new AuthorizationMiddleware(ROLE_WRITER))]
#[Update('/api/menu', new AuthorizationMiddleware(ROLE_WRITER))]
#[Delete('/api/menu', new AuthorizationMiddleware(ROLE_WRITER))]
class Menu extends Entity implements JsonSerializable
{
    #[Id]
    #[Column(autogenerated: true)]
    public int $id;

    /** @var string The name of the menu might be displayed in the frontend */
    #[Column]
    public string $name;

    /** @var int|null The ID of the file containing the logo */
    #[Column]
    public ?int $logo = null;

    /**
     * Formats the current menu into an array
     *
     * @return array<string, array<string, int|string>|int|string>
     */
    public function format(): array
    {
        $logo = $this->getLogo();
        $logoData = [];
        if ($logo) {
            $logoData['id'] = $logo->id;
            $logoData['name'] = $logo->name;

            return [
                'name' => $this->name,
                'id' => $this->id,
                'logo' => $logoData,
            ];
        }

        return [
            'name' => $this->name,
            'id' => $this->id,
        ];
    }

    /**
     * Gets the logo file
     *
     * @return File|null
     */
    public function getLogo(): ?File
    {
        if ($this->logo === null) {
            return null;
        }

        return File::findById($this->logo);
    }

    /**
     * Gets the menu items
     *
     * @return Iterator<MenuItem>
     */
    public function getItems(): Iterator
    {
        return MenuItem::findByMenu($this->id);
    }

    /**
     * @param array{artistId?: int|null, formId?: int|null, classicPageId?: int|null, modernPageId?: int|null, galleryId?: int|null, categoryId?: int|null, blogHomePage?: bool|null, title: string, route?: string|null, highlighted?: bool|null, items?: array<string, mixed>|null}[] $items
     * @return void
     * @throws TransactionFailedException
     */
    public function replaceItems(array $items): void
    {
        $pdo = self::getPdo();
        $begin = $pdo->beginTransaction();
        if (!$begin) {
            throw new TransactionFailedException('Transaction could not be initialized');
        }

        try {
            $query = self::getQueryBuilder()
                ->newDelete()
                ->from(MenuItem::getTableName())
                ->where('menu_id = :menuId', ['menuId' => $this->id]);

            self::executeQuery($query);
            foreach ($items as $idx => $item) {
                $row = [
                    'position' => $idx,
                    'menu_id' => $this->id,
                    'title' => $item['title'],
                    'route' => $item['route'] ?? null,
                    'highlighted' => ($item['highlighted'] ?? false) ? 1 : 0,
                ];
                if ($item['artistId'] ?? false) {
                    $row['artist_id'] = $item['artistId'];
                } elseif ($item['formId'] ?? false) {
                    $row['form_id'] = $item['formId'];
                } elseif ($item['galleryId'] ?? false) {
                    $row['gallery_id'] = $item['galleryId'];
                } elseif ($item['modernPageId'] ?? false) {
                    $row['segment_page_id'] = $item['modernPageId'];
                } elseif ($item['classicPageId'] ?? false) {
                    $row['page_id'] = $item['classicPageId'];
                } elseif ($item['categoryId'] ?? false) {
                    $row['category_id'] = $item['categoryId'];
                } elseif ($item['blogHomePage'] ?? false) {
                    $row['blog_home_page'] = $item['blogHomePage'] ? 1 : 0;
                }

                $query = self::getQueryBuilder()
                    ->newInsert()
                    ->into(MenuItem::getTableName())
                    ->addRow($row);

                $id = self::executeQuery($query);
                $this->insertChildItems($item['items'] ?? [], (int)$id);
            }

            $pdo->commit();
        } catch (PDOException $ex) {
            $pdo->rollBack();
            throw $ex;
        }
    }

    /**
     * @param array{artistId?: int|null, formId?: int|null, classicPageId?: int|null, modernPageId?: int|null, galleryId?: int|null, categoryId?: int|null, blogHomePage?: bool|null, title: string, route?: string|null, highlighted?: bool|null, items?: array<string, mixed>|null}[] $items
     * @param int $parentId
     * @return void
     */
    private function insertChildItems(array $items, int $parentId): void
    {
        foreach ($items as $idx => $item) {
            $row = [
                'position' => $idx,
                'parent_id' => $parentId,
                'title' => $item['title'],
                'route' => $item['route'] ?? null,
                'highlighted' => ($item['highlighted'] ?? false) ? 1 : 0,
            ];
            if ($item['artistId'] ?? false) {
                $row['artist_id'] = $item['artistId'];
            } elseif ($item['formId'] ?? false) {
                $row['form_id'] = $item['formId'];
            } elseif ($item['galleryId'] ?? false) {
                $row['gallery_id'] = $item['galleryId'];
            } elseif ($item['modernPageId'] ?? false) {
                $row['segment_page_id'] = $item['modernPageId'];
            } elseif ($item['classicPageId'] ?? false) {
                $row['page_id'] = $item['classicPageId'];
            } elseif ($item['categoryId'] ?? false) {
                $row['category_id'] = $item['categoryId'];
            } elseif ($item['blogHomePage'] ?? false) {
                $row['blog_home_page'] = $item['blogHomePage'] ? 1 : 0;
            }

            $query = self::getQueryBuilder()
                ->newInsert()
                ->into(MenuItem::getTableName())
                ->addRow($row);

            $id = self::executeQuery($query);
            $this->insertChildItems($item['items'] ?? [], (int)$id);
        }
    }

    public function jsonSerialize(): mixed
    {
        return $this->format();
    }
}
