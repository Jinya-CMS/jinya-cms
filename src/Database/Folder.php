<?php

namespace Jinya\Cms\Database;

use Exception;
use Iterator;
use JetBrains\PhpStorm\ArrayShape;
use Jinya\Cms\Web\Middleware\AuthorizationMiddleware;
use Jinya\Database\Attributes\Column;
use Jinya\Database\Attributes\Id;
use Jinya\Database\Attributes\Table;
use Jinya\Database\Entity;
use Jinya\Router\Extensions\Database\Attributes\Create;
use Jinya\Router\Extensions\Database\Attributes\Delete;
use Jinya\Router\Extensions\Database\Attributes\Find;
use Jinya\Router\Extensions\Database\Attributes\Update;
use JsonSerializable;

/**
 * This class contains a folder. Folders are used to group other folders or files in the file manager.
 * In addition to tags, this gives more control on organization of files.
 */
#[Table('folder')]
#[Find('/api/folder', new AuthorizationMiddleware(ROLE_READER))]
#[Create('/api/folder', new AuthorizationMiddleware(ROLE_WRITER))]
#[Update('/api/folder', new AuthorizationMiddleware(ROLE_WRITER))]
#[Delete('/api/folder', new AuthorizationMiddleware(ROLE_WRITER))]
class Folder extends Entity implements JsonSerializable
{
    #[Id]
    #[Column(autogenerated: true)]
    public int $id;

    /** @var string The name of the folder */
    #[Column]
    public string $name = '';

    /** @var int|null The ID of the parent folder */
    #[Column(sqlName: 'parent_id')]
    public ?int $parentId = null;

    /**
     * Formats the folder
     *
     * @return array<string, int|string|null|mixed|bool>
     * @throws Exception
     */
    #[ArrayShape([
        'id' => 'int',
        'name' => 'string',
        'folders' => 'array',
        'files' => 'array',
    ])]
    public function format(): array
    {
        return [
            'id' => $this->id,
            'name' => $this->name,
            'files' => array_map(static fn(File $file) => $file->format(), iterator_to_array($this->getFiles())),
            'folders' => array_map(static fn(Folder $folder) => $folder->format(),
                iterator_to_array($this->getFolders())),
        ];
    }

    /**
     * Gets all files in this folder
     *
     * @return Iterator<File>
     */
    public function getFiles(): Iterator
    {
        return File::findByFilters(['folder_id = :parent' => ['parent' => $this->id]], 'name ASC');
    }

    /**
     * Gets all folders in this folder
     *
     * @return Iterator<Folder>
     */
    public function getFolders(): Iterator
    {
        return self::findByFilters(['parent_id = :parent' => ['parent' => $this->id]], 'name ASC');
    }

    /**
     * Finds all root folders
     *
     * @return Iterator
     */
    public static function findRootFolders(): Iterator
    {
        return self::findByFilters(['parent_id is null' => []], 'name ASC');
    }

    public function jsonSerialize(): mixed
    {
        return $this->format();
    }
}
