<?php

namespace Jinya\Cms\Database;

use Jinya\Cms\Authentication\CurrentUser;
use Jinya\Cms\Web\Middleware\AuthorizationMiddleware;
use DateTime;
use JetBrains\PhpStorm\ArrayShape;
use Jinya\Database\Attributes\Column;
use Jinya\Database\Attributes\Id;
use Jinya\Database\Attributes\Table;
use Jinya\Database\Entity;
use Jinya\Database\Exception\NotNullViolationException;
use Jinya\Router\Extensions\Database\Attributes\ApiIgnore;
use Jinya\Router\Extensions\Database\Attributes\Create;
use Jinya\Router\Extensions\Database\Attributes\Delete;
use Jinya\Router\Extensions\Database\Attributes\Find;
use Jinya\Router\Extensions\Database\Attributes\Update;
use JsonSerializable;

/**
 * This class contains a classic page. Classic pages only contain HTML content and a title
 */
#[Table('page')]
#[Find('/api/classic-page', new AuthorizationMiddleware(ROLE_READER))]
#[Create('/api/classic-page', new AuthorizationMiddleware(ROLE_WRITER))]
#[Update('/api/classic-page', new AuthorizationMiddleware(ROLE_WRITER))]
#[Delete('/api/classic-page', new AuthorizationMiddleware(ROLE_WRITER))]
class ClassicPage extends Entity implements JsonSerializable
{
    #[Id]
    #[Column(autogenerated: true)]
    public int $id;

    /** @var int The ID of the artist who created the segment page */
    #[Column(sqlName: 'creator_id')]
    #[ApiIgnore]
    public int $creatorId;

    /** @var int The ID of the artist who last updated the segment page */
    #[Column(sqlName: 'updated_by_id')]
    #[ApiIgnore]
    public int $updatedById;

    /** @var DateTime The time the segment page was created */
    #[Column(sqlName: 'created_at')]
    #[ApiIgnore]
    public DateTime $createdAt;

    /** @var DateTime The time the segment page was last updated */
    #[Column(sqlName: 'last_updated_at')]
    #[ApiIgnore]
    public DateTime $lastUpdatedAt;

    /** @var string The content of the simple page */
    #[Column]
    public string $content;

    /** @var string The title of the simple page */
    #[Column]
    public string $title;

    /**
     * Creates the current simple page
     *
     * @return void
     * @throws NotNullViolationException
     */
    public function create(): void
    {
        $this->lastUpdatedAt = new DateTime();
        $this->updatedById = CurrentUser::$currentUser->id;

        $this->createdAt = new DateTime();
        $this->creatorId = CurrentUser::$currentUser->id;

        parent::create();
    }

    /**
     * Updates the current simple page
     *
     * @return void
     * @throws NotNullViolationException
     */
    public function update(): void
    {
        $this->lastUpdatedAt = new DateTime();
        $this->updatedById = CurrentUser::$currentUser->id;

        parent::update();
    }

    /**
     * Formats the current page
     *
     * @return array<string, array<string, array<string, string|null>|string>|int|string>
     */
    #[ArrayShape([
        'id' => 'int',
        'title' => 'string',
        'content' => 'string',
        'created' => 'array',
        'updated' => 'array'
    ])] public function format(): array
    {
        $creator = $this->getCreator();
        $updatedBy = $this->getUpdatedBy();

        return [
            'id' => $this->id,
            'title' => $this->title,
            'content' => $this->content,
            'created' => [
                'by' => [
                    'artistName' => $creator?->artistName,
                    'email' => $creator?->email,
                    'profilePicture' => $creator?->profilePicture,
                ],
                'at' => $this->createdAt->format(DATE_ATOM),
            ],
            'updated' => [
                'by' => [
                    'artistName' => $updatedBy?->artistName,
                    'email' => $updatedBy?->email,
                    'profilePicture' => $updatedBy?->profilePicture,
                ],
                'at' => $this->lastUpdatedAt->format(DATE_ATOM),
            ],
        ];
    }

    /**
     * Gets the creator
     *
     * @return Artist|null
     */
    public function getCreator(): ?Artist
    {
        return Artist::findById($this->creatorId);
    }

    /**
     * Gets the artist who last updated the page
     *
     * @return Artist|null
     */
    public function getUpdatedBy(): ?Artist
    {
        return Artist::findById($this->updatedById);
    }

    public function jsonSerialize(): mixed
    {
        return $this->format();
    }
}
