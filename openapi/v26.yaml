openapi: 3.0.3
info:
  title: Jinya CMS API
  version: 26.0.0
  contact:
    name: Jinya Developers
    url: 'https://github.com/Jinya-CMS/Jinya-CMS'
    email: developers@jinya.de
  license:
    name: MIT
    url: 'https://github.com/Jinya-CMS/Jinya-CMS/blob/main/LICENSE'
  description: This API docs specifies the Jinya CMS API for version 26.0.0
  x-logo:
    url: 'https://raw.githubusercontent.com/Jinya-CMS/jinya-cms/main/public/designer/favicons/favicon-light.png'
    backgroundColor: '#FFFFFF'
    altText: Jinya logo
servers:
  - url: 'https://{yourServer}'
    description: Your server of Jinya CMS
    variables:
      yourServer:
        default: localhost:8080
        description: The server your Jinya CMS instance is installed on
tags:
  - name: authentication
    description: User authentication
  - name: statistics
    description: Statistics
  - name: media
    description: Media management
  - name: pages-and-forms
    description: Pages and forms management
  - name: blog
    description: Blog management
  - name: design
    description: Theme and menu management
  - name: my-jinya
    description: My Jinya area
  - name: maintenance
    description: Maintenance of Jinya
  - name: database
    description: Database access
  - name: artists
    description: Artist management
paths:
  /api/api-key:
    get:
      summary: List api keys
      tags:
        - authentication
      responses:
        '200':
          description: Successfully got all api keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api-key-list'
        '401':
          description: Api Key is missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_api_keys
      description: Gets all currently valid api keys
      security:
        - jinya-api-key: [ ]
  /api/api-key/{key}:
    parameters:
      - name: key
        schema:
          type: string
        in: path
        required: true
    delete:
      summary: Delete api key
      operationId: delete_api_key
      responses:
        '204':
          description: Succesfully deleted the api key
        '401':
          description: Api Key is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: The specified api key was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      tags:
        - authentication
      security:
        - jinya-api-key: [ ]
      description: Deletes the api key given in the request path

  /api/user:
    get:
      summary: List users
      responses:
        '200':
          description: Successfully returned all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-list'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_users
      description: Gets a list of all users (artists)
      tags:
        - artists
      security:
        - jinya-api-key: [ ]
    post:
      summary: Create user
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Email address is in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: create_user
      description: Creates a new user (artist)
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-user-request'
      tags:
        - artists
  /api/user/{id}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Update user by id
      responses:
        '204':
          description: Successfully updated user
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Email address is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_user
      description: Updates the user with the given id
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-user-request'
      tags:
        - artists
    delete:
      summary: Delete user by id
      responses:
        '204':
          description: User successfully deleted
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_user
      security:
        - jinya-api-key: [ ]
      description: Deletes the given user
      tags:
        - artists
    get:
      summary: Get user by id
      responses:
        '200':
          description: Successfully got the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_user_by_id
      description: Gets the user with the given id
      security:
        - jinya-api-key: [ ]
      tags:
        - artists
  /api/user/{id}/activation:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Activate user
      tags:
        - artists
      responses:
        '204':
          description: Successfully activated the user
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: activate_user
      security:
        - jinya-api-key: [ ]
      description: Activates the user with the given id
    delete:
      summary: Deactivate user
      tags:
        - artists
      responses:
        '204':
          description: Successfully deactivated the user
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Cannot deactivate last admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: deactivate_user
      description: Deactivates the user with the given id
      security:
        - jinya-api-key: [ ]
  /api/user/{id}/profilepicture:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Update user profile picture by id
      responses:
        '204':
          description: Successfully updated users profile picture
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Artist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: upload_user_profilepicture
      description: Updates the users profile picture
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          image/apng:
            schema:
              type: string
              format: binary
          image/avif:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/svg+xml:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
      tags:
        - artists
    delete:
      summary: Delete user profile picture by id
      responses:
        '204':
          description: Users profile picture successfully deleted
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_user_profilepicture
      security:
        - jinya-api-key: [ ]
      description: Deletes the given users profile picture
      tags:
        - artists
    get:
      summary: Get user profile picture by id
      responses:
        '200':
          description: Successfully got the profile picture
          content:
            image/apng:
              schema:
                type: string
                format: binary
            image/avif:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/svg+xml:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_user_profilepicture
      description: Gets the users profile picture
      security:
        - jinya-api-key: [ ]
      tags:
        - artists

  /api/login:
    post:
      summary: Login
      tags:
        - authentication
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/login-result'
        '401':
          description: Unknown Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Bad Credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: login
      description: 'With the login api a user can be logged in. If the device code is empty, you need to provide a two factor code. If the two factor code is empty, you need to provide a device code.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login-request'
      parameters:
        - name: JinyaDeviceCode
          description: The Jinya Device Code contains the identification for a known device
          schema:
            type: string
          in: header
      security: []
    head:
      summary: Check the validity of a Jinya Api Key
      tags:
        - authentication
      responses:
        '204':
          description: Api Key is valid
        '401':
          description: Api key is invalid
      operationId: check_api_key
      description: Check if the api key provided in the header is still valid.
      security:
        - jinya-api-key: [ ]
  /api/account/password:
    put:
      summary: Change password
      tags:
        - authentication
      responses:
        '204':
          description: Successfully changed the password
        '400':
          description: New password is missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '401':
          description: Authentication Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Old Password is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: change_password
      description: Updates the password of the current user
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/change-password-request'
  /api/2fa:
    post:
      summary: Request two-factor code
      tags:
        - authentication
      responses:
        '204':
          description: Successfully sent two-factor code
        '403':
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '500':
          description: Sending of the email failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: request_two_factor_code
      description: This request creates a new two-factor token and sends it to the provided user
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request-two-factor-code'

  /api/blog-category:
    get:
      summary: List blog categories
      responses:
        '200':
          description: Successfully returned all blog categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blog-category-list'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_blog_categories
      description: Gets a list of all blog categories
      tags:
        - blog
      security:
        - jinya-api-key: [ ]
    post:
      summary: Create blog category
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blog-category'
        '400':
          description: Missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Name is in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: create_blog_category
      description: Creates a new blog category
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-blog-category-request'
      tags:
        - blog
  /api/blog-category/{id}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Update blog category by id
      responses:
        '204':
          description: Successfully updated blog category
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Name is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_blog_category
      description: Updates the blog category with the given id
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-blog-category-request'
      tags:
        - blog
    delete:
      summary: Delete blog category by id
      responses:
        '204':
          description: Blog category successfully deleted
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Blog category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_blog_category
      security:
        - jinya-api-key: [ ]
      description: Deletes the given blog category
      tags:
        - blog
    get:
      summary: Get blog category by id
      responses:
        '200':
          description: Successfully got the blog category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blog-category'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Blog category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_blog_category_by_id
      description: Gets the blog category with the given id
      security:
        - jinya-api-key: [ ]
      tags:
        - blog
  /api/blog-category/{id}/post:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get blog posts by category id
      responses:
        '200':
          description: Successfully got the blog posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blog-post-list'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Blog category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_blog_posts_by_category_id
      description: Gets the blog posts for the given category
      security:
        - jinya-api-key: [ ]
      tags:
        - blog
  /api/blog-post:
    get:
      summary: List blog posts
      responses:
        '200':
          description: Successfully returned all blog posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blog-post-list'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_blog_posts
      description: Gets a list of all blog posts in all categories
      tags:
        - blog
      security:
        - jinya-api-key: [ ]
    post:
      summary: Create blog post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blog-post'
        '400':
          description: Missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Slug or title is in use. Also the category or header image could not exists, check the exception details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: create_blog_post
      description: Creates a new blog post
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-blog-post-request'
      tags:
        - blog
  /api/blog-post/{id}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Update blog post by id
      responses:
        '204':
          description: Successfully updated blog post
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Slug or title is in use. Also the category or header image could not exists, check the exception details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_blog_post
      description: Updates the blog post with the given id
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-blog-post-request'
      tags:
        - blog
    delete:
      summary: Delete blog post by id
      responses:
        '204':
          description: Blog post successfully deleted
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Blog post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_blog_post
      security:
        - jinya-api-key: [ ]
      description: Deletes the given blog post
      tags:
        - blog
    get:
      summary: Get blog post by id
      responses:
        '200':
          description: Successfully got the blog post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Blog post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_blog_post_by_id
      description: Gets the blog post with the given id
      security:
        - jinya-api-key: [ ]
      tags:
        - blog
  /api/blog-post/{id}/section:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: List blog post sections
      responses:
        '200':
          description: Successfully returned all blog post sections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/blog-post-section'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Blog post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_blog_post_sections
      description: Gets a list of all blog post sections for the given post
      tags:
        - blog
      security:
        - jinya-api-key: [ ]
    put:
      summary: Update blog post sections
      responses:
        '204':
          description: Updated blog post sections
        '400':
          description: Missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Blog post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_blog_post_sections
      description: Replaces all blog post sections
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/update-blog-post-section'
      tags:
        - blog

  /api/maintenance/database/analyze:
    get:
      summary: Analyzes the database
      tags:
        - database
      responses:
        '200':
          description: Successfully returned the full database structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/database-analysis'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: analyze_database
      description: Gets a full structure of the database
      security:
        - jinya-api-key: [ ]
  /api/maintenance/database/query:
    post:
      summary: Execute sql queries
      tags:
        - database
      responses:
        '200':
          description: Successfully executed the queries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/database-execution-request'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      operationId: api_maintenance_database_query_execute
      security:
        - jinya-api-key: [ ]
      description: |-
        Executes the provided sql queries. Only the following query types are allowed:
        * UPDATE
        * DELETE
        * INSERT
        * SELECT
        * EXPLAIN
        * CHECK
        * CHECKSUM
        * ANALYSE
        * SHOW
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/database-execution-result'
  /api/environment:
    get:
      summary: Gets all environment variables
      tags:
        - maintenance
      responses:
        '200':
          description: Successfully returned the environment variables
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_environment_variables
      description: Gets all environment variables currently used in Jinya CMS
      security:
        - jinya-api-key: [ ]

  /api/file:
    get:
      summary: List files
      tags:
        - media
      responses:
        '200':
          description: Successfully returned all files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file-list'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_files
      description: Gets a list of all uploaded files
      security:
        - jinya-api-key: [ ]
    post:
      summary: Create file
      tags:
        - media
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create-file-request'
        '400':
          description: Missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Name is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: create_file
      description: Creates a new file, uploading needs to be done in the second step
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-file-request'
  /api/file/{id}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Update file by id
      tags:
        - media
      responses:
        '204':
          description: Successfully updated file
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Name is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: udpate_file
      description: Updates the name of the given file
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-file-request'
    delete:
      summary: Delete file by id
      tags:
        - media
      responses:
        '204':
          description: File successfully deleted
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_file
      security:
        - jinya-api-key: [ ]
      description: Deletes the given file
    get:
      summary: Get file by id
      tags:
        - media
      responses:
        '200':
          description: Successfully got the file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_file_by_id
      description: Gets the file with the specified id
      security:
        - jinya-api-key: [ ]
  /api/file/{id}/content:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Start file upload
      tags:
        - media
      responses:
        '204':
          description: Successfully started the file upload
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: start_file_upload
      description: Starts the file upload
      security:
        - jinya-api-key: [ ]
    get:
      summary: Get file content by id
      tags:
        - media
      responses:
        '200':
          description: Successfully got the file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_file_content
      description: Gets the files content with the specified id
      security:
        - jinya-api-key: [ ]
  /api/file/{id}/content/{position}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
      - name: position
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Upload file chunk
      tags:
        - media
      responses:
        '204':
          description: Successfully uploaded the chunk
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: upload_file_chunk
      description: Uploads the given file chunk for the file with the given id at the given position
      security:
        - jinya-api-key: [ ]
  /api/file/{id}/content/finish:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Finish upload
      tags:
        - media
      responses:
        '204':
          description: Successfully finished the upload
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: finish_file_upload
      description: Finishes the upload for the given file
      security:
        - jinya-api-key: [ ]
  /api/file-tag:
    get:
      summary: List file tags
      tags:
        - media
      responses:
        '200':
          description: Successfully returned all file tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file-tag-list'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_file_tags
      description: Gets a list of all file tags
      security:
        - jinya-api-key: [ ]
    post:
      summary: Create file tag
      tags:
        - media
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file-tag'
        '400':
          description: Missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Name is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: create_file_tag
      description: Creates a new file tag
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-file-tag-request'
  /api/file-tag/{id}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Update file tag by id
      tags:
        - media
      responses:
        '204':
          description: Successfully updated file tag
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: File tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Name is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: udpate_file_tag
      description: Updates the name of the given file tag
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-file-tag-request'
    delete:
      summary: Delete file tag by id
      tags:
        - media
      responses:
        '204':
          description: File tag successfully deleted
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: File tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_file_tag
      security:
        - jinya-api-key: [ ]
      description: Deletes the given file tag
    get:
      summary: Get file tag by id
      tags:
        - media
      responses:
        '200':
          description: Successfully got the file tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file-tag'
        '404':
          description: File tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_file_tag_by_id
      description: Gets the file tag with the specified id
      security:
        - jinya-api-key: [ ]

  /api/form:
    get:
      summary: List forms
      tags:
        - pages-and-forms
      responses:
        '200':
          description: Successfully listed forms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/form-list'
        '401':
          description: Api token missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_forms
      security:
        - jinya-api-key: [ ]
      description: Gets all forms
    post:
      summary: Create form
      tags:
        - pages-and-forms
      responses:
        '201':
          description: Successfully created the form
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/form'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '401':
          description: Api token missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Title is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: create_form
      description: Creates a new form with the given parameters
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-form-request'
  /api/form/{id}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get form by id
      tags:
        - pages-and-forms
      responses:
        '200':
          description: Successfully got the form
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/form'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_form_by_id
      description: Gets the specified form
      security:
        - jinya-api-key: [ ]
    delete:
      summary: Deletes form by id
      tags:
        - pages-and-forms
      responses:
        '204':
          description: No Content
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_form
      description: Deletes the given form
      security:
        - jinya-api-key: [ ]
    put:
      summary: Update form by id
      tags:
        - pages-and-forms
      responses:
        '204':
          description: Successfully updated the form
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Form not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Title is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-form-request'
      description: Updates the given form with the specified values
      security:
        - jinya-api-key: [ ]
  /api/form/{id}/items:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: List form items
      tags:
        - pages-and-forms
      responses:
        '200':
          description: Successfully got all items of the given form
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/form-item'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Form not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_form_items
      security:
        - jinya-api-key: [ ]
      description: Gets the items of the given form
    put:
      summary: Update form items
      responses:
        '204':
          description: Updated form items
        '400':
          description: Missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Form not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_form_items
      description: Replaces all form items
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/update-form-item'
      tags:
        - pages-and-forms

  /api/gallery:
    get:
      summary: List galleries
      tags:
        - media
      responses:
        '200':
          description: Successfully got list of galleries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gallery-list'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_galleries
      description: Gets all galleries saved in Jinya CMS
      security:
        - jinya-api-key: [ ]
    post:
      summary: Create gallery
      tags:
        - media
      responses:
        '201':
          description: Successfully created gallery
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gallery'
        '400':
          description: Name is missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Name is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: create_gallery
      description: Creates a new gallery with the given values
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-gallery-request'
  /api/gallery/{id}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Update gallery by id
      tags:
        - media
      responses:
        '204':
          description: Successfully updated gallery
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Name or slug is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_gallery
      description: Updates the given gallery
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-gallery-request'
    delete:
      summary: Delete gallery by id
      tags:
        - media
      responses:
        '204':
          description: Gallery successfully deleted
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_gallery
      security:
        - jinya-api-key: [ ]
      description: Deletes the given gallery
    get:
      summary: Get gallery by id
      tags:
        - media
      responses:
        '200':
          description: Successfully got the gallery
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gallery'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_gallery_by_id
      description: Gets the gallery with the specified slug
      security:
        - jinya-api-key: [ ]
  /api/gallery/{galleryId}/file:
    parameters:
      - name: galleryId
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: List files by gallery id
      tags:
        - media
      responses:
        '200':
          description: List of all files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/gallery-file-position'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_gallery_files
      description: Gets all files in the given gallery
      security:
        - jinya-api-key: [ ]
    post:
      summary: Create file by gallery id
      tags:
        - media
      responses:
        '201':
          description: Added file to gallery
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gallery-file-position'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Gallery or file not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: create_gallery_file_position
      description: Adds a new file to the gallery
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-gallery-file-position-request'
  /api/gallery/{galleryId}/file/{position}:
    parameters:
      - name: galleryId
        schema:
          type: integer
        in: path
        required: true
      - name: position
        schema:
          type: integer
        in: path
        required: true
    delete:
      summary: Delete file from gallery by position
      tags:
        - media
      responses:
        '204':
          description: Successfully deleted the file
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Gallery or position not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_gallery_file_position
      security:
        - jinya-api-key: [ ]
      description: Deletes the gallery file from the given gallery
    put:
      summary: Update file by gallery file position
      tags:
        - media
      responses:
        '204':
          description: Successfully updated the gallery file
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Gallery or file not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_gallery_file_position
      description: Updates the given gallery file. The selected file and the position can be changed
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-gallery-file-position-request'

  /api/known_device:
    get:
      summary: List known devices
      tags:
        - authentication
      responses:
        '200':
          description: Successfully got all known devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/known-device-list'
        '401':
          description: Api Key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_known_devices
      security:
        - jinya-api-key: [ ]
      description: Gets a list of all known devices
  /api/known_device/{key}:
    parameters:
      - name: key
        schema:
          type: string
        in: path
        required: true
    head:
      summary: Check the validity of a known device
      tags:
        - authentication
      responses:
        '204':
          description: Known device is valid
        '401':
          description: Known device is invalid
      operationId: check_known_device
      description: Check if the known device provided in the url is valid
      security: [ ]
    delete:
      summary: Delete known device
      tags:
        - authentication
      responses:
        '204':
          description: Successfully deleted api key
        '401':
          description: Api Key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid API Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Known device was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_known_device
      description: Deletes the given known device key. Next time this devices, tries to log in a two factor code is required
      security:
        - jinya-api-key: [ ]

  /api/ip-location/{ip}:
    parameters:
      - name: ip
        schema:
          type: string
          format: ipv4
        in: path
        required: true
    get:
      summary: Locate the given ip
      tags:
        - media
      responses:
        '200':
          description: Successfully got list the location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ip-location'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: locate_ip
      description: Locates the given IPv4 address using ip.jinya.de
      security:
        - jinya-api-key: [ ]

  /api/menu:
    get:
      summary: List menus
      responses:
        '200':
          description: Successfully returned all menus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/menu-list'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_menus
      description: Gets a list of all menus
      tags:
        - design
      security:
        - jinya-api-key: [ ]
    post:
      summary: Create menu
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/menu'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Name is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: create_menu
      description: Creates a new menu
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-menu-request'
      tags:
        - design
  /api/menu/{id}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Update menu by id
      responses:
        '204':
          description: Successfully updated menu
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Menu not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Name is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_menu
      description: Updates the name of the given menu
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-menu-request'
      tags:
        - design
    delete:
      summary: Delete menu by id
      responses:
        '204':
          description: Menu successfully deleted
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Menu not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_menu
      security:
        - jinya-api-key: [ ]
      description: Deletes the given menu
      tags:
        - design
    get:
      summary: Get menu by id
      responses:
        '200':
          description: Successfully got the menu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/menu'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Menu not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_menu_by_id
      description: Gets the menu with the specified id
      security:
        - jinya-api-key: [ ]
      tags:
        - design
  /api/menu/{menuId}/items:
    parameters:
      - name: menuId
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: List items by menu id
      tags:
        - design
      responses:
        '200':
          description: Successfully listed menu items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/menu-item'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Menu not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_menu_items_by_menu
      description: Lists all menu items for the given menu
      security:
        - jinya-api-key: [ ]
    put:
      summary: Update menu items
      responses:
        '204':
          description: Updated menu items
        '400':
          description: Missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Menu not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_menu_items
      description: Replaces all menu items
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/update-menu-item'
      tags:
        - design

  /api/me:
    get:
      summary: Get about me
      operationId: get_about_me
      responses:
        '200':
          description: Successfully got all information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      description: Get the currently logged-in users details
      security:
        - jinya-api-key: [ ]
      tags:
        - my-jinya
    put:
      summary: Update about me data
      tags:
        - my-jinya
      responses:
        '204':
          description: Successfully changed about me data
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_my_jinya
      security:
        - jinya-api-key: [ ]
      description: Updates the about me data of the current user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-about-me-request'
  /api/me/colorscheme:
    put:
      summary: Update prefered color scheme
      tags:
        - my-jinya
      responses:
        '204':
          description: Successfully changed the prefered color scheme
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_prefered_colorscheme
      description: Updates the prefered color scheme
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-colorscheme'
  /api/me/profilepicture:
    put:
      summary: Update current user profile picture
      responses:
        '204':
          description: Successfully updated current users profile picture
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: upload_my_profilepicture
      description: Updates the current users profile picture
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          image/apng:
            schema:
              type: string
              format: binary
          image/avif:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/svg+xml:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
      tags:
        - artist

  /api/classic-page:
    get:
      summary: List classic pages
      responses:
        '200':
          description: Successfully returned all classic pages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/classic-page-list'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_classic_pages
      description: Gets a list of all classic pages
      tags:
        - pages-and-forms
      security:
        - jinya-api-key: [ ]
    post:
      summary: Create classic page
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/classic-page'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Title is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: create_classic_page
      description: Creates a new classic page
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-classic-page-request'
      tags:
        - pages-and-forms
  /api/classic-page/{id}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Update classic page by id
      responses:
        '204':
          description: Successfully updated classic page
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Classic page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Title is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_classic_page
      description: Updates the classic page with the given id
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-classic-page-request'
      tags:
        - pages-and-forms
    delete:
      summary: Delete classic page by id
      responses:
        '204':
          description: Classic page successfully deleted
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Classic page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_classic_page
      security:
        - jinya-api-key: [ ]
      description: Deletes the given classic page
      tags:
        - pages-and-forms
    get:
      summary: Get page by id
      tags:
        - pages-and-forms
      responses:
        '200':
          description: Successfully got the classic page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/classic-page'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Classic page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_classic_page_by_id
      description: Gets the classic page with the specified id
      security:
        - jinya-api-key: [ ]

  /api/modern-page:
    get:
      summary: List modern pages
      responses:
        '200':
          description: Successfully returned all modern pages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modern-page-list'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_modern_pages
      description: Gets a list of all modern pages
      tags:
        - pages-and-forms
      security:
        - jinya-api-key: [ ]
    post:
      summary: Create modern page
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modern-page'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Title is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: create_modern_page
      description: Creates a new modern page
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-modern-page-request'
      tags:
        - pages-and-forms
  /api/modern-page/{id}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Update modern page by id
      responses:
        '204':
          description: Successfully updated modern page
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Modern page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '409':
          description: Name is not unique
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_modern_page
      description: Updates the modern page with the given id
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-modern-page-request'
      tags:
        - pages-and-forms
    delete:
      summary: Delete modern page by id
      responses:
        '204':
          description: Modern page successfully deleted
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Modern page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: delete_modern_page
      security:
        - jinya-api-key: [ ]
      description: Deletes the given page
      tags:
        - pages-and-forms
    get:
      summary: Get modern page by id
      tags:
        - pages-and-forms
      responses:
        '200':
          description: Successfully got the modern page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modern-page'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Modern page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_modern_page_by_id
      description: Gets the modern page with the specified id
      security:
        - jinya-api-key: [ ]
  /api/modern-page/{id}/section:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get sections by modern page
      tags:
        - pages-and-forms
      responses:
        '200':
          description: Successfully got sections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/modern-page-section'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Modern page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_modern_page_sections
      description: Gets all sections in the given modern page
      security:
        - jinya-api-key: [ ]
    put:
      summary: Update modern page sections
      responses:
        '204':
          description: Updated modern page sections
        '400':
          description: Missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Modern page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_modern_page_sections
      description: Replaces all modern page sections
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/update-modern-page-section'
      tags:
        - pages-and-forms

  /api/php-info:
    get:
      summary: Get PHP info
      responses:
        '200':
          description: Successfully returned all classic pages
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_php_info
      description: Get PHP infos as JSON
      tags:
        - maintenance
      security:
        - jinya-api-key: [ ]

  /api/theme:
    get:
      summary: List all themes
      tags:
        - design
      responses:
        '200':
          description: Successfully got all themes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/theme-list'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_all_themes
      description: Gets a list of all currently installed themes
      security:
        - jinya-api-key: [ ]
    post:
      summary: Upload new theme
      tags:
        - design
      responses:
        '204':
          description: Successfully uploaded new theme
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: upload_theme
      description: Uploads a new theme that can later be used
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/zip:
            schema:
              type: string
              format: binary
  /api/theme/{id}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get theme by id
      tags:
        - design
      responses:
        '200':
          description: Successfully got the theme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/theme'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_theme_by_id
      description: Gets the information of the theme with the specified id
      security:
        - jinya-api-key: [ ]
    put:
      summary: Update theme by id
      tags:
        - design
      responses:
        '204':
          description: Successfully updated the theme
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_theme
      description: Updates the given theme
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/zip:
            schema:
              type: string
              format: binary
  /api/theme/{id}/active:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Activate theme by id
      tags:
        - design
      responses:
        '204':
          description: Successfully activated the theme
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: activate_theme
      description: Activates the given theme
      security:
        - jinya-api-key: [ ]
  /api/theme/{id}/assets:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Compile the themes assets
      tags:
        - design
      responses:
        '204':
          description: Successfully compiled the themes assets
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: compile_theme_assets
      description: Compiles the given themes assets
      security:
        - jinya-api-key: [ ]
  /api/theme/{id}/styling:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get theme styling variables
      tags:
        - design
      responses:
        '200':
          description: Successfully got the theme styling variables
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_theme_variables
      description: Gets styling variables of the given theme
      security:
        - jinya-api-key: [ ]
    put:
      summary: Update the theme variables and compile the theme
      tags:
        - design
      responses:
        '204':
          description: Successfully updated the variables and compiled the theme
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: save_theme_variables
      description: Updates the theme variables and recompiles the theme to apply the variables to the assets
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
  /api/theme/{id}/blog-category:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get theme blog categories
      tags:
        - design
      responses:
        '200':
          description: Successfully got the theme blog categories
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/theme-blog-category'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_theme_blog_categories
      description: Gets the theme blog categories for the given theme
      security:
        - jinya-api-key: [ ]
  /api/theme/{id}/blog-category/{name}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
      - name: name
        schema:
          type: string
        in: path
        required: true
    put:
      summary: Set theme blog category with the given name in the given theme
      tags:
        - design
      responses:
        '204':
          description: Successfully updated the theme blog category
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme or blog category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_theme_blog_category_by_name
      description: Updates the theme blog category with the given name in the given theme
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-theme-blog-category-request'
  /api/theme/{id}/file:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get theme files
      tags:
        - design
      responses:
        '200':
          description: Successfully got the theme files
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/theme-file'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_theme_files
      description: Gets the theme files for the given theme
      security:
        - jinya-api-key: [ ]
  /api/theme/{id}/file/{name}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
      - name: name
        schema:
          type: string
        in: path
        required: true
    put:
      summary: Set theme file with the given name in the given theme
      tags:
        - design
      responses:
        '204':
          description: Successfully updated the theme file
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme or file not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_theme_file_by_name
      description: Updates the theme file with the given name in the given theme
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-theme-file-request'
  /api/theme/{id}/form:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get theme forms
      tags:
        - design
      responses:
        '200':
          description: Successfully got the theme forms
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/theme-form'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_theme_forms
      description: Gets the theme forms for the given theme
      security:
        - jinya-api-key: [ ]
  /api/theme/{id}/form/{name}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
      - name: name
        schema:
          type: string
        in: path
        required: true
    put:
      summary: Set theme form with the given name in the given theme
      tags:
        - design
      responses:
        '204':
          description: Successfully updated the theme form
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme or form not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_theme_form_by_name
      description: Updates the theme form with the given name in the given theme
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-theme-form-request'
  /api/theme/{id}/gallery:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get theme galleries
      tags:
        - design
      responses:
        '200':
          description: Successfully got the theme galleries
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/theme-gallery'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_theme_galleries
      description: Gets the theme galleries for the given theme
      security:
        - jinya-api-key: [ ]
  /api/theme/{id}/gallery/{name}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
      - name: name
        schema:
          type: string
        in: path
        required: true
    put:
      summary: Set theme gallery with the given name in the given theme
      tags:
        - design
      responses:
        '204':
          description: Successfully updated the theme gallery
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme or gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_theme_gallery_by_name
      description: Updates the theme gallery with the given name in the given theme
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-theme-gallery-request'
  /api/theme/{id}/menu:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get theme menus
      tags:
        - design
      responses:
        '200':
          description: Successfully got the theme menus
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/theme-menu'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_theme_menus
      description: Gets the theme menus for the given theme
      security:
        - jinya-api-key: [ ]
  /api/theme/{id}/menu/{name}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
      - name: name
        schema:
          type: string
        in: path
        required: true
    put:
      summary: Set theme menu with the given name in the given theme
      tags:
        - design
      responses:
        '204':
          description: Successfully updated the theme menu
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme or menu not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_theme_menu_by_name
      description: Updates the theme menu with the given name in the given theme
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-theme-menu-request'
  /api/theme/{id}/classic-page:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get theme classic pages
      tags:
        - design
      responses:
        '200':
          description: Successfully got the theme classic pages
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/theme-classic-page'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_theme_classic_pages
      description: Gets the theme classic pages for the given theme
      security:
        - jinya-api-key: [ ]
  /api/theme/{id}/classic-page/{name}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
      - name: name
        schema:
          type: string
        in: path
        required: true
    put:
      summary: Set theme classic page with the given name in the given theme
      tags:
        - design
      responses:
        '204':
          description: Successfully updated the theme classic page
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme or classic page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_theme_classic_page_by_name
      description: Updates the theme classic page with the given name in the given theme
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-theme-classic-page-request'
  /api/theme/{id}/modern-page:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get theme modern pages
      tags:
        - design
      responses:
        '200':
          description: Successfully got the theme modern pages
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/theme-modern-page'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_theme_modern_pages
      description: Gets the theme modern pages for the given theme
      security:
        - jinya-api-key: [ ]
  /api/theme/{id}/modern-page/{name}:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
      - name: name
        schema:
          type: string
        in: path
        required: true
    put:
      summary: Set theme modern page with the given name in the given theme
      tags:
        - design
      responses:
        '204':
          description: Successfully updated the theme modern page
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme or modern page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_theme_modern_page_by_name
      description: Updates the theme modern page with the given name in the given theme
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-theme-modern-page-request'
  /api/theme/{id}/configuration:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    put:
      summary: Update theme configuration by id
      tags:
        - design
      responses:
        '204':
          description: Successfully updated the theme configuration
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_theme_configuration
      description: Updates the theme configuration of the given theme
      security:
        - jinya-api-key: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                oneOf:
                  - type: string
                  - type: boolean
  /api/theme/{id}/configuration/default:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get the default configuration
      tags:
        - design
      responses:
        '200':
          description: The theme default configuration
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_theme_default_configuration
      description: Gets the default configuration for the given theme
      security:
        - jinya-api-key: [ ]
  /api/theme/{id}/configuration/structure:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get the configuration structure
      tags:
        - design
      responses:
        '200':
          description: The theme configuration structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/theme-configuration-structure'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_theme_configuration_structure
      description: Gets the configuration structure for the given theme
      security:
        - jinya-api-key: [ ]
  /api/theme/{id}/preview:
    parameters:
      - name: id
        schema:
          type: integer
        in: path
        required: true
    get:
      summary: Get theme preview image
      tags:
        - design
      responses:
        '200':
          description: Successfully got the theme preview image
          content:
            image/apng:
              schema:
                type: string
                format: binary
            image/avif:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/svg+xml:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_theme_preview_image
      description: Gets the information of the theme with the specified id
      security:
        - jinya-api-key: [ ]

  /api/update:
    put:
      summary: Perform update of Jinya CMS
      responses:
        '204':
          description: Successfully updated Jinya CMS to the latest version
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: update_jinya_cms
      description: Perform update of Jinya CMS to the latest version
      security:
        - jinya-api-key: [ ]
      tags:
        - maintenance

  /api/version:
    get:
      summary: Get version information
      responses:
        '200':
          description: The version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/version-information'
        '401':
          description: Api key missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
        '403':
          description: Invalid api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
      operationId: get_version_information
      description: Gets the currently installed version and the latest version available
      security:
        - jinya-api-key: [ ]
      tags:
        - maintenance
components:
  securitySchemes:
    jinya-api-key:
      name: JinyaApiKey
      type: apiKey
      in: header
      description: A Jinya API Key is generated after a user successfully logged in and returned in the response body of the login response
  schemas:
    modified-by:
      type: object
      required:
        - artistName
        - email
      properties:
        artistName:
          type: string
        email:
          type: string
          format: email
        profilePicture:
          type: string
    modification:
      title: Modification
      type: object
      description: Contains the model of modifications that are set during update and create
      properties:
        by:
          $ref: '#/components/schemas/modified-by'
        at:
          type: string
          format: date-time
      required:
        - by
        - at
    error:
      title: Error details
      type: object
      description: All information about an error
      properties:
        message:
          type: string
        type:
          type: string
      required:
        - message
        - type
    exception:
      title: Exception result
      description: Data returned if an error occurs
      type: object
      properties:
        success:
          type: boolean
        error:
          $ref: '#/components/schemas/error'
      required:
        - error
        - success

    login-result:
      title: Login result
      type: object
      properties:
        apiKey:
          type: string
        deviceCode:
          type: string
        roles:
          type: array
          items:
            type: string
            enum:
              - ROLE_WRITER
              - ROLE_READER
              - ROLE_ADMIN
      required:
        - apiKey
        - deviceCode
        - roles
    login-request:
      title: Login request
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        twoFactorCode:
          type: string
      required:
        - username
        - password
    change-password-request:
      title: The data to change the users password
      type: object
      properties:
        password:
          type: string
        old_password:
          type: string
    request-two-factor-code:
      title: The data to request the two factor code
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    api-key:
      title: Api key
      type: object
      description: The ApiKey is used to authenticate a user against the Jinya API
      properties:
        key:
          type: string
        remoteAddress:
          type: string
          format: ipv4
        userAgent:
          type: string
        validSince:
          type: string
          format: date-time
      required:
        - key
        - remoteAddress
        - userAgent
        - validSince
    api-key-list:
      title: A list of api keys
      type: object
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/api-key'
      required:
        - offset
        - itemsCount
        - totalCount
        - items

    user:
      title: Artist
      type: object
      description: Artists are the users of Jinya CMS
      properties:
        artistName:
          type: string
        email:
          type: string
          format: email
        profilePicture:
          type: string
        roles:
          type: array
          items:
            type: string
            enum:
              - ROLE_WRITER
              - ROLE_READER
              - ROLE_ADMIN
        enabled:
          type: boolean
        id:
          type: integer
        aboutMe:
          type: string
        colorScheme:
          type: string
          enum:
            - dark
            - light
            - auto
      required:
        - artistName
        - email
        - enabled
        - id
    user-list:
      title: A list of users
      type: object
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/user'
      required:
        - offset
        - itemsCount
        - totalCount
        - items
    create-user-request:
      type: object
      properties:
        artistName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        enabled:
          type: boolean
          default: false
        roles:
          type: array
          items:
            type: string
            enum:
              - ROLE_WRITER
              - ROLE_READER
              - ROLE_ADMIN
      required:
        - artistName
        - email
        - password
    update-user-request:
      type: object
      properties:
        artistName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        roles:
          type: array
          items:
            type: string
            enum:
              - ROLE_WRITER
              - ROLE_READER
              - ROLE_ADMIN

    blog-category:
      title: Blog category
      type: object
      description: A category for blog posts
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        parent:
          $ref: '#/components/schemas/blog-category'
        webhookEnabled:
          type: boolean
        webhookUrl:
          type: string
          format: uri
      required:
        - id
        - name
    blog-post-header-image:
      title: Blog post header image
      type: object
      description: A reduced file containing only the information needed for the header image of a blog post
      properties:
        id:
          type: integer
        name:
          type: string
        path:
          type: string
      required:
        - id
        - name
    blog-post:
      title: Blog post
      type: object
      description: A blog post
      properties:
        id:
          type: string
        title:
          type: string
        slug:
          type: string
        headerImage:
          $ref: '#/components/schemas/blog-post-header-image'
        category:
          $ref: '#/components/schemas/blog-category'
        public:
          type: string
        created:
          $ref: '#/components/schemas/modification'
      required:
        - id
        - title
        - slug
        - public
        - created
    blog-post-section:
      title: Blog post section
      type: object
      description: A section in a blog post
      properties:
        id:
          type: string
        position:
          type: string
        gallery:
          $ref: '#/components/schemas/gallery'
        link:
          type: string
        html:
          type: string
        file:
          $ref: '#/components/schemas/file'
      required:
        - id
        - position
    blog-category-list:
      title: A list of blog categories
      type: object
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/blog-category'
      required:
        - offset
        - itemsCount
        - totalCount
        - items
    create-blog-category-request:
      title: Create blog category request
      type: object
      description: A category for blog posts
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: integer
        webhookEnabled:
          type: boolean
        webhookUrl:
          type: string
          format: uri
      required:
        - name
    update-blog-category-request:
      title: Update blog category request
      type: object
      description: A category for blog posts
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: integer
        webhookEnabled:
          type: boolean
        webhookUrl:
          type: string
          format: uri
    blog-post-list:
      title: A list of blog posts
      type: object
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/blog-post'
      required:
        - offset
        - itemsCount
        - totalCount
        - items
    create-blog-post-request:
      title: Create blog post request
      type: object
      description: A blog post
      properties:
        title:
          type: string
        slug:
          type: string
        headerImageId:
          type: integer
        categoryId:
          type: integer
        public:
          type: string
      required:
        - title
        - slug
        - public
    update-blog-post-request:
      title: Update blog post request
      type: object
      description: A post for blog posts
      properties:
        title:
          type: string
        slug:
          type: string
        headerImageId:
          type: integer
        categoryId:
          type: integer
        public:
          type: string
    update-blog-post-section:
      title: Update blog post section
      type: object
      description: A section in a blog post
      properties:
        position:
          type: string
        gallery:
          type: integer
        link:
          type: string
        html:
          type: string
        file:
          type: integer
      required:
        - position

    file:
      title: File
      type: object
      description: A file is an uploaded file that can be used in pages and galleries
      properties:
        id:
          type: integer
        created:
          $ref: '#/components/schemas/modification'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/file-tag'
        name:
          type: string
        path:
          type: string
        type:
          type: string
        updated:
          $ref: '#/components/schemas/modification'
      required:
        - id
        - name
        - path
        - type
    file-list:
      title: A list of files
      type: object
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/file'
      required:
        - offset
        - itemsCount
        - totalCount
        - items
    create-file-request:
      title: Create file request
      type: object
      description: A file is an uploaded file that can be used in pages and galleries
      properties:
        name:
          type: string
        tags:
          type: array
          items:
            type: string
      required:
        - name
    update-file-request:
      title: Update file request
      type: object
      description: A file is an uploaded file that can be used in pages and galleries
      properties:
        name:
          type: string
        tags:
          type: array
          items:
            type: string
      required:
        - name
    file-tag:
      title: File tag
      type: object
      description: A tag allows grouping of files
      properties:
        id:
          type: integer
        name:
          type: string
        color:
          type: string
        emoji:
          type: string
      required:
        - id
        - name
    file-tag-list:
      title: File tag list
      type: object
      description: A tag allows grouping of file tags
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/file-tag'
      required:
        - offset
        - itemsCount
        - totalCount
        - items
    create-file-tag-request:
      title: Create file tag
      type: object
      description: A tag allows grouping of files
      properties:
        name:
          type: string
        color:
          type: string
        emoji:
          type: string
      required:
        - name
    update-file-tag-request:
      title: Update file tag
      type: object
      description: A tag allows grouping of files
      properties:
        name:
          type: string
        color:
          type: string
        emoji:
          type: string

    database-analysis:
      title: The database analysis
      type: object
      description: Contains all information about the database
      properties:
        tables:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/database-table'
        server:
          $ref: '#/components/schemas/database-server-info'
        variables:
          $ref: '#/components/schemas/database-variables'
    database-variables:
      title: The variables of the database
      type: object
      description: Contains variables of the database
      properties:
        local:
          type: object
          additionalProperties:
            type: string
        global:
          type: object
          additionalProperties:
            type: string
        session:
          type: object
          additionalProperties:
            type: string
      additionalProperties:
        type: string
    database-server-info:
      title: The database server info
      type: object
      description: Contains the server information
      properties:
        version:
          type: string
        comment:
          type: string
        compileMachine:
          type: string
        compileOs:
          type: string
      required:
        - version
        - comment
        - compileMachine
        - compileOs
    database-table:
      title: A database table
      type: object
      description: Contains the information in a database table
      properties:
        engine:
          type: string
        size:
          type: integer
        entryCount:
          type: integer
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/database-constraint'
        indexes:
          type: array
          items:
            $ref: '#/components/schemas/database-index'
        structure:
          type: array
          items:
            $ref: '#/components/schemas/database-table-field'
    database-constraint:
      title: A database table constraint
      type: object
      description: Contains the information about a constraint
      properties:
        CONSTRAINT_NAME:
          type: string
        REFERENCED_TABLE_NAME:
          type: string
        REFERENCED_COLUMN_NAME:
          type: string
        POSITION_IN_UNIQUE_CONSTRAINT:
          type: string
        CONSTRAINT_TYPE:
          type: string
        DELETE_RULE:
          type: string
        UPDATE_RULE:
          type: string
        COLUMN_NAME:
          type: string
    database-index:
      title: A database table index
      type: object
      description: Contains the information about an index
      properties:
        Table:
          type: string
        Non_unique:
          type: boolean
        Key_name:
          type: string
        Seq_in_index:
          type: integer
        Column_name:
          type: string
        Collation:
          type: string
        Cardinality:
          type: integer
        Sub_part:
          type: string
        Packed:
          type: string
        Null:
          type: string
        Index_type:
          type: string
        Comment:
          type: string
        Index_comment:
          type: string
        Visible:
          type: string
        Expression:
          type: string
    database-table-field:
      title: A database table field
      type: object
      description: Contains the information about a field
      properties:
        Field:
          type: string
        Type:
          type: string
        Null:
          type: string
        Key:
          type: string
        Default:
          type: string
        Extra:
          type: string
    database-execution-request:
      title: Execute the database queries
      type: object
      description: Contains a sql query to execute against the database
      properties:
        query:
          type: string
      required:
        - query
    database-execution-result:
      title: The result of a database query
      type: array
      description: Contains the result of a database query request
      items:
        type: object
        properties:
          statement:
            type: string
          result:
            oneOf:
              - type: array
                items:
                  type: object
                  additionalProperties: true
              - type: string
              - type: integer

    form:
      title: Form
      type: object
      description: A form is a content element that allows end users to send requests and feedback to the artist
      properties:
        id:
          type: integer
        created:
          $ref: '#/components/schemas/modification'
        description:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/form-item'
        title:
          type: string
        toAddress:
          type: string
          format: email
        updated:
          $ref: '#/components/schemas/modification'
      required:
        - id
        - created
        - items
        - updated
        - title
        - toAddress
    form-item:
      title: Form item
      description: A form item is a field in a form
      type: object
      required:
        - id
        - type
        - label
        - position
        - isRequired
        - isFromAddress
        - isSubject
      properties:
        id:
          type: integer
        type:
          type: string
          enum:
            - text
            - email
            - textarea
            - select
            - checkbox
        options:
          type: array
          items:
            type: string
        spamFilter:
          type: array
          items:
            type: string
        label:
          type: string
        placeholder:
          type: string
        helpText:
          type: string
        position:
          type: string
        isRequired:
          type: boolean
        isFromAddress:
          type: boolean
        isSubject:
          type: boolean
    form-list:
      title: A list of forms
      type: object
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/form'
      required:
        - offset
        - itemsCount
        - totalCount
        - items
    create-form-request:
      title: Create form request
      type: object
      description: A form is a content element that allows end users to send requests and feedback to the artist
      properties:
        description:
          type: string
        title:
          type: string
        toAddress:
          type: string
          format: email
      required:
        - title
        - toAddress
    update-form-request:
      title: Update form request
      type: object
      description: A form is a content element that allows end users to send requests and feedback to the artist
      properties:
        description:
          type: string
        title:
          type: string
        toAddress:
          type: string
          format: email
    update-form-item:
      title: Update form item
      description: A form item is a field in a form
      type: object
      required:
        - type
        - label
        - position
      properties:
        type:
          type: string
          enum:
            - text
            - email
            - textarea
            - select
            - checkbox
        options:
          type: array
          items:
            type: string
        spamFilter:
          type: array
          items:
            type: string
        label:
          type: string
        placeholder:
          type: string
        helpText:
          type: string
        position:
          type: string
        isRequired:
          type: boolean
        isFromAddress:
          type: boolean
        isSubject:
          type: boolean

    gallery:
      title: Gallery
      description: A gallery is a way to organize files to display them to end users
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        orientation:
          type: string
          enum:
            - horizontal
            - vertical
          default: horizontal
        type:
          type: string
          enum:
            - sequence
            - masonry
          default: sequence
        created:
          $ref: '#/components/schemas/modification'
        updated:
          $ref: '#/components/schemas/modification'
      required:
        - id
        - name
    gallery-list:
      title: A list of galleries
      type: object
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/gallery'
      required:
        - offset
        - itemsCount
        - totalCount
        - items
    gallery-file-position:
      title: Gallery file position
      description: A gallery file position connects a file to a gallery
      type: object
      properties:
        id:
          type: integer
        file:
          $ref: '#/components/schemas/file'
        gallery:
          $ref: '#/components/schemas/gallery'
        position:
          type: integer
      required:
        - id
        - file
        - gallery
        - position
    create-gallery-file-position-request:
      title: Create gallery file position request
      description: A gallery file position connects a file to a gallery
      type: object
      properties:
        position:
          type: integer
        file:
          type: integer
      required:
        - file
        - position
    update-gallery-file-position-request:
      title: Update gallery file position request
      description: A gallery file position connects a file to a gallery
      type: object
      properties:
        newPosition:
          type: integer
        file:
          type: integer
    create-gallery-request:
      title: Create gallery request
      description: A gallery is a way to organize files to display them to end users
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        orientation:
          type: string
          enum:
            - horizontal
            - vertical
          default: horizontal
        type:
          type: string
          enum:
            - sequence
            - masonry
          default: sequence
      required:
        - id
        - name
    update-gallery-request:
      title: Update gallery request
      description: A gallery is a way to organize files to display them to end users
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        orientation:
          type: string
          enum:
            - horizontal
            - vertical
        type:
          type: string
          enum:
            - sequence
            - masonry

    known-device:
      title: Known device
      type: object
      properties:
        key:
          type: string
        remoteAddress:
          type: string
          format: ipv4
        userAgent:
          type: string
      required:
        - key
        - remoteAddress
        - userAgent
    known-device-list:
      title: A list of known devices
      type: object
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/known-device'
      required:
        - offset
        - itemsCount
        - totalCount
        - items

    ip-location:
      title: IP location
      description: The data of a located ip
      type: object
      properties:
        city:
          type: string
        country:
          type: string
        region:
          type: string
        providedBy:
          type: string

    menu:
      title: Menu
      type: object
      description: Menus are the central navigation entities in Jinya. In the theme config, they can be assigned to a theme
      properties:
        id:
          type: integer
        name:
          type: string
        logo:
          $ref: '#/components/schemas/menu-logo'
      required:
        - id
        - name
    menu-list:
      title: A list of menus
      type: object
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/menu'
      required:
        - offset
        - itemsCount
        - totalCount
        - items
    menu-logo:
      title: Menu logo
      type: object
      description: A reduced file containing only the data needed for the logo
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
    create-menu-request:
      title: Create menu request
      type: object
      description: Menus are the central navigation entities in Jinya. In the theme config, they can be assigned to a theme
      properties:
        name:
          type: string
        logo:
          type: integer
      required:
        - name
    update-menu-request:
      title: Update menu request
      type: object
      description: Menus are the central navigation entities in Jinya. In the theme config, they can be assigned to a theme
      properties:
        name:
          type: string
        logo:
          type: integer
    menu-item-form:
      title: Menu item form
      type: object
      description: A form referenced in a menu item
      properties:
        id:
          type: integer
        title:
          type: string
      required:
        - id
        - title
    menu-item-artist:
      title: Menu item artist
      type: object
      description: An artist referenced in a menu item
      properties:
        id:
          type: integer
        artistName:
          type: string
        email:
          type: string
          format: email
      required:
        - id
        - artistName
        - email
    menu-item-classic-page:
      title: Menu item classic page
      type: object
      description: A classic page referenced in a menu item
      properties:
        id:
          type: integer
        title:
          type: string
      required:
        - id
        - title
    menu-item-modern-page:
      title: Menu item modern page
      type: object
      description: A modern page referenced in a menu item
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
    menu-item-gallery:
      title: Menu item gallery
      type: object
      description: A gallery referenced in a menu item
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
    menu-item-blog-category:
      title: Menu item blog category
      type: object
      description: A blog category referenced in a menu item
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
    menu-item:
      title: Menu item
      type: object
      description: A menu item is an element in the menu navigation tree.
      properties:
        id:
          type: integer
        position:
          type: integer
        highlighted:
          type: boolean
        title:
          type: string
        route:
          type: string
        blogHomePage:
          type: boolean
        form:
          $ref: '#/components/schemas/menu-item-form'
        artist:
          $ref: '#/components/schemas/menu-item-artist'
        classicPage:
          $ref: '#/components/schemas/menu-item-classic-page'
        modernPage:
          $ref: '#/components/schemas/menu-item-modern-page'
        gallery:
          $ref: '#/components/schemas/menu-item-gallery'
        blogCategory:
          $ref: '#/components/schemas/menu-item-blog-category'
        items:
          type: array
          items:
            $ref: '#/components/schemas/menu-item'
      required:
        - id
        - position
        - title
        - route
    update-menu-item:
      title: Update menu item
      type: object
      description: A menu item is an element in the menu navigation tree.
      properties:
        highlighted:
          type: boolean
        title:
          type: string
        route:
          type: string
        blogHomePage:
          type: boolean
        formId:
          type: integer
        artistId:
          type: integer
        classicPageId:
          type: integer
        modernPageId:
          type: integer
        galleryId:
          type: integer
        blogCategoryId:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/update-menu-item'
      required:
        - id
        - position
        - title
        - route

    update-about-me-request:
      title: Update about me request
      description: Updates the current users about me data
      type: object
      properties:
        email:
          type: string
          format: email
        artistName:
          type: string
        aboutMe:
          type: string
    update-colorscheme:
      title: Update prefered color scheme request
      description: Updates the prefered color scheme of the current user
      type: object
      properties:
        colorScheme:
          type: string
          enum:
            - auto
            - light
            - dark

    classic-page:
      title: Classic page
      type: object
      description: A classic page displays only a single html page. The name derives from the classic editing experience in the designer
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        created:
          $ref: '#/components/schemas/modification'
        updated:
          $ref: '#/components/schemas/modification'
      required:
        - id
        - title
        - content
    classic-page-list:
      title: A list of classic pages
      type: object
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/classic-page'
      required:
        - offset
        - itemsCount
        - totalCount
        - items
    create-classic-page-request:
      title: Create classic page request
      type: object
      description: A classic page displays only a single html page. The name derives from the classic editing experience in the designer
      properties:
        title:
          type: string
        content:
          type: string
      required:
        - title
        - content
    update-classic-page-request:
      title: Update classic page request
      type: object
      description: A classic page displays only a single html page. The name derives from the classic editing experience in the designer
      properties:
        title:
          type: string
        content:
          type: string

    modern-page:
      title: Modern page
      type: object
      description: A modern page displays a page made up of multiple sections. The name derives from the more modern editing experience in the designer
      properties:
        id:
          type: integer
        name:
          type: string
        sectionCount:
          type: integer
        created:
          $ref: '#/components/schemas/modification'
        updated:
          $ref: '#/components/schemas/modification'
      required:
        - id
        - name
        - sectionCount
    modern-page-section:
      title: Modern page section
      type: object
      properties:
        id:
          type: string
        position:
          type: string
        gallery:
          $ref: '#/components/schemas/gallery'
        file:
          $ref: '#/components/schemas/file'
        target:
          type: string
        action:
          type: string
          enum:
            - link
            - script
            - none
        script:
          type: string
        html:
          type: string
      required:
        - id
        - position
    modern-page-list:
      title: A list of modern pages
      type: object
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/modern-page'
      required:
        - offset
        - itemsCount
        - totalCount
        - items
    create-modern-page-request:
      title: Create modern page request
      type: object
      description: A modern page displays a page made up of multiple sections. The name derives from the more modern editing experience in the designer
      properties:
        name:
          type: string
      required:
        - name
    update-modern-page-request:
      title: Update modern page request
      type: object
      description: A modern page displays a page made up of multiple sections. The name derives from the more modern editing experience in the designer
      properties:
        name:
          type: string
    update-modern-page-section:
      title: Modern page section
      type: object
      properties:
        id:
          type: string
        gallery:
          type: integer
        file:
          type: integer
        target:
          type: string
        action:
          type: string
          enum:
            - link
            - script
            - none
        script:
          type: string
        html:
          type: string

    theme:
      title: Theme
      type: object
      description: Contains information about the rendering of the pages
      properties:
        id:
          type: integer
        name:
          type: string
        displayName:
          type: string
        configuration:
          type: object
          additionalProperties: true
        description:
          type: string
        previewImage:
          type: string
        scssVariables:
          type: object
          additionalProperties:
            type: string
        hasApi:
          type: boolean
      required:
        - id
        - name
        - displayName
        - configuration
        - description
        - scssVariables
        - hasApi
    theme-list:
      title: A list of themes
      type: object
      properties:
        offset:
          type: integer
        itemsCount:
          type: integer
        totalCount:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/theme'
      required:
        - offset
        - itemsCount
        - totalCount
        - items
    theme-blog-category:
      type: object
      description: A blog category assigned to a theme
      properties:
        name:
          type: string
        blogCategory:
          $ref: '#/components/schemas/blog-category'
      required:
        - name
        - blogCategory
    theme-file:
      type: object
      description: A file assigned to a theme
      properties:
        name:
          type: string
        file:
          $ref: '#/components/schemas/file'
      required:
        - name
        - file
    theme-form:
      type: object
      description: A form assigned to a theme
      properties:
        name:
          type: string
        form:
          $ref: '#/components/schemas/form'
      required:
        - name
        - form
    theme-gallery:
      type: object
      description: A gallery assigned to a theme
      properties:
        name:
          type: string
        gallery:
          $ref: '#/components/schemas/gallery'
      required:
        - name
        - gallery
    theme-menu:
      type: object
      description: A menu assigned to a theme
      properties:
        name:
          type: string
        menu:
          $ref: '#/components/schemas/menu'
      required:
        - name
        - menu
    theme-classic-page:
      type: object
      description: A classic page assigned to a theme
      properties:
        name:
          type: string
        page:
          $ref: '#/components/schemas/classic-page'
      required:
        - name
        - page
    theme-modern-page:
      type: object
      description: A modern page assigned to a theme
      properties:
        name:
          type: string
        sectionPage:
          $ref: '#/components/schemas/modern-page'
      required:
        - name
        - sectionPage
    theme-configuration-group:
      title: Theme configuration group
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/theme-configuration-field'
        name:
          type: string
        title:
          type: object
      description: A group for several fields in a theme config form
    theme-configuration-field:
      title: Theme configuration field
      type: object
      description: A field in the theme configuration form
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - string
            - boolean
        label:
          type: object
      required:
        - name
        - type
        - label
    theme-configuration-links:
      title: Theme configuration links
      type: object
      description: The links for the theme
      properties:
        section_pages:
          type: object
        menus:
          type: object
        pages:
          type: object
        forms:
          type: object
        galleries:
          type: object
        files:
          type: object
        blog_categories:
          type: object
    theme-configuration-structure:
      title: Theme configuration structure
      type: object
      description: The structure of the theme configuration
      properties:
        title:
          type: object
        groups:
          type: array
          items:
            $ref: '#/components/schemas/theme-configuration-group'
        links:
          $ref: '#/components/schemas/theme-configuration-links'
    update-theme-blog-category-request:
      type: object
      description: A blog category assigned to a theme
      properties:
        blogCategory:
          type: integer
      required:
        - blogCategory
    update-theme-file-request:
      type: object
      description: A file assigned to a theme
      properties:
        file:
          type: integer
      required:
        - file
    update-theme-form-request:
      type: object
      description: A form assigned to a theme
      properties:
        form:
          type: integer
      required:
        - form
    update-theme-gallery-request:
      type: object
      description: A gallery assigned to a theme
      properties:
        gallery:
          type: integer
      required:
        - gallery
    update-theme-menu-request:
      type: object
      description: A menu assigned to a theme
      properties:
        menu:
          type: integer
      required:
        - menu
    update-theme-classic-page-request:
      type: object
      description: A classic page assigned to a theme
      properties:
        classicPage:
          type: integer
      required:
        - classicPage
    update-theme-modern-page-request:
      type: object
      description: A modern page assigned to a theme
      properties:
        modernPage:
          type: integer
      required:
        - modernPage

    version-information:
      type: object
      description: The version information
      properties:
        currentVersion:
          type: string
        mostRecentVersion:
          type: string
      required:
        - currentVersion
        - mostRecentVersion
